// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x92\xc1\x8e\xda\x30\x10\x86\xef\x3c\xc5\x28\x97\x80\x96\xb5\x17\xa2\xb2\x88\x4d\xa8\x7a\x6b\x55\x54\xf5\x50\xf5\xd0\xaa\xaa\xa6\xc9\x50\x7b\xd7\x26\x96\x6d\x65\xc9\x46\x79\xf7\xca\x38\xd0\x70\xe3\xe6\x99\x7f\xbe\xc9\xcc\xfc\xc9\x85\xd7\x6a\x3b\x01\xc8\x05\x61\x15\x1e\x00\xb9\x97\x5e\xd1\xd6\xa2\xf3\x64\xab\x9c\xc7\x70\x12\x35\x25\x0f\x2f\x60\x49\x15\x89\xf3\xad\x22\x27\x88\x7c\x02\xc2\xd2\xbe\x48\x78\xe9\x1c\x1f\x30\x56\x3a\x97\x00\xdf\x06\xe8\x46\x52\x11\xee\x15\xf9\x33\x19\x29\x57\x5a\x69\x3c\x38\x5b\x16\x09\x7f\xc6\x06\x63\xe2\x52\xfc\xec\x92\x6d\xce\x63\xf2\x36\xe4\x5e\xa0\x13\xd7\xdc\x69\xc8\x70\x04\x7e\xbe\x42\x08\xfe\xd4\x55\x3b\xb4\xac\x64\x03\xb2\x2a\x12\x8d\x26\x60\x95\x6c\xa2\x30\xfe\x60\xcc\x00\x34\x68\x01\x8d\xfc\xfd\x42\x2d\x14\x90\x76\x1d\xb0\x2f\x74\xf4\x6f\x74\xf8\xf0\xf5\xd3\x67\x6a\xa1\xef\xd3\xa7\x51\xed\xbe\xb6\x1a\x7d\x28\x75\xcd\xdf\xf4\x69\x32\x92\x34\x1a\x28\x60\xc7\x34\x9a\x69\xaa\xd1\xa4\x33\xe6\xc8\x7f\x97\xf4\x3a\xfd\x99\x3d\xb2\xd5\x22\x5b\xbf\x5b\xcf\xe1\x7e\xb1\x5c\xb2\xec\x31\x5b\xad\x7e\xcd\x61\x91\xcd\xc6\xdd\x15\xb6\x64\x4f\x4d\xbc\x54\xb4\x0b\xd1\x34\x15\xde\x9b\x0d\xe7\xaa\x2e\x51\x89\xda\xf9\xcd\xfa\x61\xfd\xc0\x53\xb8\x3b\x0f\x73\x07\x29\xef\xde\x7a\xde\x1d\x7b\xde\xb5\x3d\xbb\x96\xde\x0f\xeb\x15\x21\x3d\xbc\xe7\xd0\x69\x3c\xfe\xa8\x6b\xbd\x81\xe5\xb2\x9f\x5d\xf6\x38\x0d\xc0\xb0\xaa\xbe\xd5\x53\x8d\xe6\x22\x84\xe1\x82\x13\x50\xc0\x81\x5e\x61\xc7\x3e\xa2\x13\x43\x05\xfc\xbf\xed\x95\xb5\x27\x8b\xa2\x2d\x39\x8f\x7f\xee\xbf\x00\x00\x00\xff\xff\xc3\xaf\x4e\x15\xc1\x02\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 705, mode: os.FileMode(420), modTime: time.Unix(1559836397, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

