// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8f\xda\x30\x10\xbd\xf3\x2b\xa6\xb9\x04\xb4\xac\xbd\x80\xca\x22\x48\xa8\x2a\xf5\xd0\xaa\xa8\xea\xa1\xea\xa1\x55\x55\x0d\x78\xd8\x78\xd7\x21\x96\x3d\x65\xc9\x46\xf9\xef\x95\xf3\xc1\xc2\x6d\x6f\x9e\x79\xf3\x5e\xde\xf8\x39\x49\xc6\xb9\x59\x0f\x00\x92\x8c\x50\x85\x03\x40\xc2\x9a\x0d\xad\x1d\x7a\x26\xa7\x12\xd9\x96\x83\x16\x33\xfa\xf0\x04\x8e\x4c\x1a\x79\x2e\x0d\xf9\x8c\x88\x23\xc8\x1c\xed\xd3\x48\xee\xbc\x97\x1d\x4d\xec\xbc\x8f\x40\xae\x03\xe9\x8d\x4c\x43\xb8\x37\xc4\x3d\xb3\x65\xf9\x9d\xd3\x96\xc1\xbb\x5d\x1a\xc9\x47\x3c\x62\xdb\x38\x0f\x3f\xfa\x68\x9d\xc8\xb6\xf9\x36\xca\x6d\x86\x3e\xbb\xe6\x35\x26\x3b\x72\xf0\x06\x5c\x5a\x4a\x23\xa6\x13\x07\x67\x51\x2b\x0c\x55\x05\x7a\x0f\xe2\x13\x6d\xff\x3d\x40\x5d\xb7\x4d\xd1\xcb\xb2\x36\x04\x15\x6c\x0b\xa7\xc8\x2d\x41\xa1\xcf\x48\x81\x23\x05\x13\x7b\x82\x77\x3a\xb7\x85\x63\x3c\xf0\x0a\xea\xb3\x1c\x1d\x54\x2f\x94\xc8\xe6\xd3\x4d\x16\xb2\x0f\x23\x14\xdb\x42\x95\xdd\x66\x4a\x1f\x41\xab\x34\xca\xd1\x06\xf7\x4a\x1f\x5b\xe0\x72\xef\xce\x2b\x1c\xd1\x01\x5a\xfd\xf7\x89\x4a\x48\x21\xae\x2a\x10\xdf\xe8\xc4\x2f\x74\xf8\xf8\xfd\xcb\x57\x2a\xa1\xae\xe3\xd5\xc5\xec\xbe\x70\x39\x72\x18\xf5\xc7\x87\x78\x35\xb8\x80\x72\xb4\x90\xc2\x46\xe4\x68\x87\x71\x8e\x36\x1e\x09\x4f\xfc\x53\xd3\xf3\xf0\xf7\xec\x5e\xcc\x27\xb3\xc5\xfb\xc5\x18\x6e\x27\xd3\xa9\x98\xdd\xcf\xe6\xf3\x3f\x63\x98\xcc\x46\x97\xea\x06\x4b\x72\x8d\x48\xb8\xa6\x4d\xa8\x86\x71\xc6\x6c\x97\x52\x9a\x62\x87\x26\x2b\x3c\x2f\x17\x77\x8b\x3b\x19\xc3\x4d\x6f\xe6\x06\x62\x59\xbd\xd4\xb2\x3a\xd5\xb2\x2a\x6b\x71\x0d\x7d\xe8\xd6\x4b\x43\xbb\x3b\x8f\xa1\xca\xf1\xf4\xab\x28\xf2\x25\x4c\xa7\xf5\xe8\xbc\x47\x63\x40\xa0\x52\x3f\x8a\x61\x8e\xf6\x0c\x04\x73\xe1\x41\x40\x0a\x07\x7a\x86\x8d\xf8\x8c\x3e\xeb\x26\xe0\xf5\x6e\xaf\x5e\x58\x13\x51\x1b\x4b\x22\xdb\x1f\xe8\x7f\x00\x00\x00\xff\xff\x68\x35\x78\x7f\x48\x03\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 840, mode: os.FileMode(420), modTime: time.Unix(1559854575, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
