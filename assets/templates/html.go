// Code generated by go-bindata.
// sources:
// templates/html/index.html
// DO NOT EDIT!

package templates

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _templatesHtmlIndexHtml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x53\x4d\x8b\xdb\x30\x10\xbd\xef\xaf\x18\x5c\x8a\x13\x36\x6b\xc5\x1b\x9a\x0d\x8e\x9d\xd2\x5b\x4b\x43\xe9\xa1\xf4\xd0\x52\xca\x6c\x34\x89\xb4\x2b\xc5\x42\x12\x4e\xbc\xc6\xff\xbd\xc8\x76\xbe\x6e\xbd\x69\xe6\x3d\x3d\xde\xbc\x91\x72\xe1\xb5\x5a\xdd\x01\xe4\x82\x90\x87\x03\x40\xee\xa5\x57\xb4\xb2\xe8\x3c\x59\x9e\xb3\xbe\xec\xa0\x1e\x57\x72\xff\x0a\x96\x54\x11\x39\x5f\x2b\x72\x82\xc8\x47\x20\x2c\x6d\x8b\x88\x6d\x9c\x63\x8a\x70\xab\xc8\x27\x1b\xe7\x22\x60\x83\xaa\xdb\x58\x69\x3c\x38\xbb\x29\x22\xf6\x82\x15\xf6\x8d\x33\xf9\xc5\x45\xab\x9c\xf5\xcd\xff\xbb\xf2\x20\xd0\x89\xdb\x7b\x67\x93\x83\x40\xf0\x07\xbe\x36\x54\x44\x9e\x8e\x3e\xb8\x8b\x7a\x71\x80\xe7\x92\xd7\xd0\x80\x46\xbb\x93\xfb\x0c\xa6\xe6\xb8\x04\x83\x9c\xcb\xfd\x6e\xa8\xda\x81\xf9\x4e\xa3\x81\x06\x0e\x92\x7b\x91\xa5\xd3\xe9\xfb\x25\x08\x92\x3b\xe1\x43\x51\x89\x0b\x31\x39\x39\xf3\x52\x11\x34\xf0\x5c\x5a\x4e\x36\x03\x8e\x4e\x10\x07\x4b\x1c\xd2\x8b\x70\xce\x3a\x7f\x5d\xfc\xec\x94\x7f\x28\x82\xb3\x21\x02\x2e\x2b\x90\xbc\x88\x34\x9a\x30\x26\x97\xd5\xf5\x26\xae\xd3\x02\xa8\xd0\x02\x1a\xf9\xf7\x95\x6a\x28\x20\x6e\x1a\x48\xbe\xd1\xd1\xbf\xd1\xfe\xd3\xf7\x2f\x5f\xa9\x86\xb6\x8d\x97\x57\xdc\x6d\x69\x35\xfa\x40\x75\xd5\x2e\x5e\xde\x5d\x41\x61\xe0\x02\xd6\x89\x46\x33\x8a\x35\x9a\x78\x9c\x38\xf2\x3f\x25\x1d\x46\xbf\x67\x4f\xc9\x3c\x9d\x2d\x3e\x2c\x26\xf0\x90\x3e\x3e\x26\xb3\xa7\xd9\x7c\xfe\x67\x02\xe9\x6c\x7c\xad\xae\xb0\x26\xdb\x89\x84\x30\xd6\xa1\x1a\xc5\xc2\x7b\x93\x31\xa6\xca\x0d\x2a\x51\x3a\x9f\x2d\xa6\x8b\x29\x8b\xe1\xfe\x64\xe6\x1e\x62\xd6\xbc\xb5\xac\x39\xb6\xac\xa9\xdb\xe4\x16\xfa\x38\x8c\x57\x84\xf6\x70\x9e\x40\xa3\xf1\xf8\xab\x2c\x75\x06\xe9\xbc\x1d\x9f\xe7\xe8\x0c\x24\xc8\xf9\x8f\x72\xa4\xd1\x9c\x81\x60\x2e\xbc\x1c\x28\x60\x4f\x07\x58\x27\x9f\xd1\x89\x81\x01\x97\x6c\x6f\x9e\x62\xb7\xa2\x7e\x2d\x39\xeb\xff\xcc\xbf\x00\x00\x00\xff\xff\xc8\x63\xf1\x28\x3b\x03\x00\x00")

func templatesHtmlIndexHtmlBytes() ([]byte, error) {
	return bindataRead(
		_templatesHtmlIndexHtml,
		"templates/html/index.html",
	)
}

func templatesHtmlIndexHtml() (*asset, error) {
	bytes, err := templatesHtmlIndexHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "templates/html/index.html", size: 827, mode: os.FileMode(420), modTime: time.Unix(1541183196, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"templates/html/index.html": templatesHtmlIndexHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"templates": &bintree{nil, map[string]*bintree{
		"html": &bintree{nil, map[string]*bintree{
			"index.html": &bintree{templatesHtmlIndexHtml, map[string]*bintree{}},
		}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

